global:
  # The smarthost and SMTP sender used for mail notifications.
  #  resolve_timeout: 1m
  slack_api_url: 'https://hooks.slack.com/services/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'  

# The root route on which each incoming alert enters.
route:
  # The labels by which incoming alerts are grouped together. For example,
  # multiple alerts coming in for cluster=A and alertname=LatencyHigh would
  # be batched into a single group.
  group_by: ['alertname', 'cluster', 'service','instance']

  # When a new group of alerts is created by an incoming alert, wait at
  # least 'group_wait' to send the initial notification.
  # This way ensures that you get multiple alerts for the same group that start
  # firing shortly after another are batched together on the first 
  # notification.
  group_wait: 30s

  # When the first notification was sent, wait 'group_interval' to send a batch
  # of new alerts that started firing for that group.
  group_interval: 5m

  # If an alert has successfully been sent, wait 'repeat_interval' to
  # resend them.
  repeat_interval: 1m 

  # A default receiver
  receiver: "null"

  # The child route trees.
  routes:
  - matchers:
    - severity=~"high|critical"
    receiver: "null"
  - matchers:
    - severity=~"warning|medium"
    receiver: "null"
# Inhibition rules allow to mute a set of alerts given that another alert is
# firing.
# We use this to mute any warning-level notifications if the same alert is 
# already critical.
inhibit_rules:
- source_match:
    severity: 'critical'
  target_match:
    severity: 'warning'
  equal: ['alertname', 'instance']

- source_match:
    severity: 'critical'
  target_match:
    severity: 'high'
  equal: ['alertname', 'instance']

- source_match:
    severity: 'high'
  target_match:
    severity: 'warning'
  equal: ['alertname', 'instance']

receivers:
- name: 'null'